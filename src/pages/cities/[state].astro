---
import Layout from '../../layouts/Layout.astro';
import { createClient } from '@supabase/supabase-js';

export async function getStaticPaths() {
  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
  const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
  const supabase = createClient(supabaseUrl, supabaseKey);

  // Get all states
  const { data: states } = await supabase
    .from('cities')
    .select('state')
    .not('state', 'is', null);

  const uniqueStates = [...new Set(states?.map(s => s.state) || [])];

  return uniqueStates.map(state => ({
    params: { 
      state: state.toLowerCase().replace(/\s+/g, '-') 
    },
    props: { 
      stateName: state 
    }
  }));
}

const { state } = Astro.params;
const { stateName } = Astro.props;

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Get all cities in this state with venue counts
const { data: cities, error } = await supabase
  .from('cities')
  .select(`
    city_name,
    full_name,
    population,
    venues(id, name, venue_type, category)
  `)
  .eq('state', stateName)
  .order('city_name');

if (error) {
  console.error('Error fetching cities:', error);
}

const citiesWithVenues = cities?.filter(city => city.venues && city.venues.length > 0) || [];
const totalVenues = citiesWithVenues.reduce((sum, city) => sum + city.venues.length, 0);

function getCitySlug(cityName: string) {
  return cityName.toLowerCase().replace(/\s+/g, '-');
}

function getStateSlug(stateName: string) {
  return stateName.toLowerCase().replace(/\s+/g, '-');
}
---

<Layout title={`${stateName} Cities - Downtown Dry`}>
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
      <!-- Breadcrumb -->
      <nav class="mb-6">
        <ol class="flex items-center space-x-2 text-sm text-gray-500">
          <li><a href="/cities/" class="hover:text-indigo-600">Cities</a></li>
          <li>→</li>
          <li class="text-gray-900 font-medium">{stateName}</li>
        </ol>
      </nav>

      <div class="mb-8">
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          Alcohol-Free Venues in {stateName}
        </h1>
        <p class="text-lg text-gray-600">
          {citiesWithVenues.length} {citiesWithVenues.length === 1 ? 'city' : 'cities'} • 
          {totalVenues} {totalVenues === 1 ? 'venue' : 'venues'}
        </p>
      </div>

      {citiesWithVenues.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {citiesWithVenues.map((city) => (
            <a 
              href={`/cities/${getStateSlug(stateName)}/${getCitySlug(city.city_name)}/`}
              class="block p-6 bg-white rounded-lg border border-gray-200 hover:border-indigo-300 hover:shadow-lg transition-all duration-200"
            >
              <h3 class="text-xl font-semibold text-gray-900 mb-2">{city.city_name}</h3>
              
              {city.population && (
                <p class="text-sm text-gray-500 mb-3">
                  Population: {city.population.toLocaleString()}
                </p>
              )}

              <div class="mb-4">
                <p class="text-sm text-gray-600 mb-2">
                  {city.venues.length} {city.venues.length === 1 ? 'venue' : 'venues'}
                </p>
                
                {/* Show venue types */}
                <div class="flex flex-wrap gap-1">
                  {[...new Set(city.venues.map(v => v.venue_type).filter(Boolean))].slice(0, 3).map((type) => (
                    <span class="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded">
                      {type}
                    </span>
                  ))}
                  {[...new Set(city.venues.map(v => v.venue_type).filter(Boolean))].length > 3 && (
                    <span class="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded">
                      +{[...new Set(city.venues.map(v => v.venue_type).filter(Boolean))].length - 3} more
                    </span>
                  )}
                </div>
              </div>

              <div class="text-indigo-600 font-medium">
                Explore {city.city_name} →
              </div>
            </a>
          ))}
        </div>
      ) : (
        <div class="text-center py-12 bg-gray-50 rounded-lg">
          <p class="text-gray-500 mb-4">No venues found in {stateName} yet.</p>
          <a 
            href="/contact" 
            class="text-indigo-600 hover:text-indigo-700 font-medium"
          >
            Know of a venue? Let us know →
          </a>
        </div>
      )}
    </div>
  </main>
</Layout> 
