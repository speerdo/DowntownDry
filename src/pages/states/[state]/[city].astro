---
import Layout from '../../../layouts/Layout.astro';
import GoogleMap from '../../../components/GoogleMap.astro';
import { createClient } from '@supabase/supabase-js';

export async function getStaticPaths() {
  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
  const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
  const supabase = createClient(supabaseUrl, supabaseKey);

  // Get all cities with venues
  const { data: cities } = await supabase
    .from('cities')
    .select(`
      city_name,
      state,
      venues!inner(id)
    `)
    .not('state', 'is', null);

  return cities?.map(city => ({
    params: { 
      state: city.state.toLowerCase().replace(/\s+/g, '-'),
      city: city.city_name.toLowerCase().replace(/\s+/g, '-')
    },
    props: { 
      stateName: city.state,
      cityName: city.city_name
    }
  })) || [];
}

const { state, city } = Astro.params;
const { stateName, cityName } = Astro.props;

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Get city info and all venues
const { data: cityData, error: cityError } = await supabase
  .from('cities')
  .select(`
    city_name,
    full_name,
    state,
    population
  `)
  .eq('city_name', cityName)
  .eq('state', stateName)
  .single();

const { data: venues, error: venuesError } = await supabase
  .from('venues')
  .select(`
    id,
    name,
    address,
    phone,
    website,
    latitude,
    longitude,
    venue_type,
    category,
    is_alcohol_free,
    serves_mocktails,
    serves_kava,
    serves_thc,
    serves_hemp_drinks,
    rating,
    zip_code,
    hemp_brand,
    is_dispensary,
    enrichment_source
  `)
  .eq('city', cityName)
  .eq('state', stateName)
  .order('rating', { ascending: false })
  .order('name');

if (cityError || venuesError) {
  console.error('Error fetching data:', { cityError, venuesError });
}

function getStateSlug(stateName: string) {
  return stateName.toLowerCase().replace(/\s+/g, '-');
}

function getCitySlug(cityName: string) {
  return cityName.toLowerCase().replace(/\s+/g, '-');
}

function renderStarRating(rating: number | null) {
  if (!rating) return '';
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
  
  return '★'.repeat(fullStars) + (hasHalfStar ? '☆' : '') + '☆'.repeat(emptyStars);
}

function calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number) {
  const R = 3959; // Earth's radius in miles
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLng = (lng2 - lng1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLng/2) * Math.sin(dLng/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// Calculate city center (average of all venue coordinates)
const cityCenter = venues?.length ? {
  lat: venues.reduce((sum, v) => sum + (v.latitude || 0), 0) / venues.length,
  lng: venues.reduce((sum, v) => sum + (v.longitude || 0), 0) / venues.length
} : null;

// Group venues by category
const venuesByCategory = venues?.reduce((acc, venue) => {
  const category = venue.category || 'thc-cocktails';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(venue);
  return acc;
}, {} as Record<string, typeof venues>) || {};

const categoryNames: Record<string, string> = {
  'kava': 'Kava Bars',
  'mocktail': 'Mocktail Bars',
  'restaurant': 'Restaurants',
  'cafe': 'Cafes',
  'brewery': 'Breweries',
  'bar': 'Bars',
  'thc-cocktails': 'THC Cocktails'
};
---

<Layout title={`${cityName}, ${stateName} - Downtown Dry`}>
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-6xl mx-auto">
      <!-- Breadcrumb -->
      <nav class="mb-6">
        <ol class="flex items-center space-x-2 text-sm text-gray-500">
          <li><a href="/states/" class="hover:text-indigo-600">States</a></li>
          <li>→</li>
          <li><a href={`/states/${getStateSlug(stateName)}/`} class="hover:text-indigo-600">{stateName}</a></li>
          <li>→</li>
          <li class="text-gray-900 font-medium">{cityName}</li>
        </ol>
      </nav>

      <div class="mb-8">
        <h1 class="text-4xl font-bold text-gray-900 mb-4 font-heading">
          Alcohol-Free Venues in {cityName}, {stateName}
        </h1>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div class="bg-white p-4 rounded-lg border border-gray-200">
            <div class="text-2xl font-bold text-indigo-600">{venues?.length || 0}</div>
            <div class="text-sm text-gray-600">{venues?.length === 1 ? 'Venue' : 'Venues'}</div>
          </div>
          
          {venues && venues.length > 0 && (
            <div class="bg-white p-4 rounded-lg border border-gray-200">
              <div class="text-2xl font-bold text-yellow-600">
                {(venues.filter(v => v.rating).reduce((sum, v) => sum + (v.rating || 0), 0) / venues.filter(v => v.rating).length).toFixed(1)}
              </div>
              <div class="text-sm text-gray-600">Avg Rating</div>
            </div>
          )}
          
          {venues && venues.length > 0 && (
            <div class="bg-white p-4 rounded-lg border border-gray-200">
              <div class="text-2xl font-bold text-green-600">
                {venues.filter(v => v.is_alcohol_free).length}
              </div>
              <div class="text-sm text-gray-600">Alcohol-Free</div>
            </div>
          )}
          
          {cityData?.population && (
            <div class="bg-white p-4 rounded-lg border border-gray-200">
              <div class="text-2xl font-bold text-gray-600">
                {cityData.population.toLocaleString()}
              </div>
              <div class="text-sm text-gray-600">Population</div>
            </div>
          )}
        </div>
      </div>

      {venues && venues.length > 0 ? (
        <div class="grid grid-cols-1 xl:grid-cols-5 gap-8">
          <!-- Map Section -->
          <div class="xl:col-span-3">
            <div class="mb-6">
              <h2 class="text-2xl font-semibold text-gray-900 mb-4">Map View</h2>
              <GoogleMap 
                venues={venues} 
                height="500px"
                zoom={13}
              />
            </div>

            <!-- Legend -->
            <div class="mb-8 p-4 bg-gray-50 rounded-lg">
              <h3 class="font-semibold text-gray-900 mb-3">Map Legend</h3>
              <div class="grid grid-cols-2 gap-2 text-sm">
                <div class="flex items-center gap-2">
                  <div class="w-4 h-4 rounded-full bg-orange-600"></div>
                  <span>Fully Alcohol-Free</span>
                </div>
                <div class="flex items-center gap-2">
                  <div class="w-4 h-4 rounded-full bg-blue-600"></div>
                  <span>Serves Mocktails</span>
                </div>
                <div class="flex items-center gap-2">
                  <div class="w-4 h-4 rounded-full bg-purple-600"></div>
                  <span>Kava Bar</span>
                </div>
                <div class="flex items-center gap-2">
                  <div class="w-4 h-4 rounded-full bg-green-600"></div>
                  <span>THC Cocktails</span>
                </div>
              </div>
            </div>
          </div>

          <!-- Venues List -->
          <div class="xl:col-span-2">
            <h2 class="text-2xl font-semibold text-gray-900 mb-4">Venues</h2>
            
            <div class="space-y-6">
              {Object.entries(venuesByCategory).map(([category, categoryVenues]) => (
                <div>
                  <h3 class="text-lg font-medium text-gray-900 mb-3">
                    {categoryNames[category] || category}
                  </h3>
                  <div class="space-y-4">
                    {categoryVenues.map((venue) => (
                      <div class="p-6 bg-white border border-gray-200 rounded-xl hover:border-indigo-300 hover:shadow-lg transition-all duration-200">
                        <!-- Header with name and rating -->
                        <div class="flex items-start justify-between mb-3">
                          <div class="flex-1">
                            <h4 class="text-lg font-bold text-gray-900 mb-1 font-heading">{venue.name}</h4>
                            {venue.rating && (
                              <div class="flex items-center gap-2 mb-2">
                                <span class="text-yellow-500 text-lg" style="line-height: 1;">
                                  {renderStarRating(venue.rating)}
                                </span>
                                <span class="text-sm font-medium text-gray-700">
                                  {venue.rating.toFixed(1)}
                                </span>
                                <span class="text-xs text-gray-500">
                                  ({venue.enrichment_source === 'Google Maps Scraping' ? 'Google' : 'Reviews'})
                                </span>
                              </div>
                            )}
                          </div>
                        </div>

                        <!-- Location Info -->
                        <div class="space-y-2 mb-4">
                          {venue.address && (
                            <div class="flex items-start gap-2">
                              <svg class="w-4 h-4 text-gray-400 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
                              </svg>
                              <div class="flex-1">
                                <p class="text-sm text-gray-600">{venue.address}</p>
                                {venue.zip_code && (
                                  <p class="text-xs text-gray-500">{venue.zip_code}</p>
                                )}
                                {cityCenter && venue.latitude && venue.longitude && (
                                  <p class="text-xs text-gray-500 mt-1">
                                    {calculateDistance(cityCenter.lat, cityCenter.lng, venue.latitude, venue.longitude).toFixed(1)} miles from center
                                  </p>
                                )}
                              </div>
                            </div>
                          )}
                        </div>

                        <!-- Contact Info -->
                        <div class="flex flex-wrap gap-3 mb-4">
                          {venue.phone && (
                            <a 
                              href={`tel:${venue.phone}`} 
                              class="inline-flex items-center gap-1 text-sm text-indigo-600 hover:text-indigo-700 font-medium"
                            >
                              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                              </svg>
                              Call
                            </a>
                          )}
                          {venue.website && (
                            <a 
                              href={venue.website} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              class="inline-flex items-center gap-1 text-sm text-indigo-600 hover:text-indigo-700 font-medium"
                            >
                              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.559-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.559.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd" />
                              </svg>
                              Website
                            </a>
                          )}
                        </div>

                        <!-- Special Features -->
                        {(venue.hemp_brand || venue.is_dispensary) && (
                          <div class="mb-4 p-3 bg-gray-50 rounded-lg">
                            <h5 class="text-sm font-medium text-gray-900 mb-2">Special Features</h5>
                            <div class="space-y-1">
                              {venue.hemp_brand && (
                                <p class="text-sm text-gray-600">
                                  <span class="font-medium">Hemp Brand:</span> {venue.hemp_brand}
                                </p>
                              )}
                              {venue.is_dispensary && (
                                <p class="text-sm text-gray-600">
                                  <span class="font-medium">Licensed Dispensary</span>
                                </p>
                              )}
                            </div>
                          </div>
                        )}

                        <!-- Venue Tags -->
                        <div class="flex flex-wrap gap-2">
                          {venue.venue_type && (
                            <span class="bg-blue-100 text-blue-800 text-xs font-medium px-3 py-1 rounded-full">
                              {venue.venue_type}
                            </span>
                          )}
                          {venue.is_alcohol_free && (
                            <span class="bg-green-100 text-green-800 text-xs font-medium px-3 py-1 rounded-full">
                              🚫🍺 Alcohol-Free
                            </span>
                          )}
                          {venue.serves_mocktails && (
                            <span class="bg-red-100 text-red-800 text-xs font-medium px-3 py-1 rounded-full">
                              🍹 Mocktails
                            </span>
                          )}
                          {venue.serves_kava && (
                            <span class="bg-purple-100 text-purple-800 text-xs font-medium px-3 py-1 rounded-full">
                              🌿 Kava
                            </span>
                          )}
                          {venue.serves_thc && (
                            <span class="bg-yellow-100 text-yellow-800 text-xs font-medium px-3 py-1 rounded-full">
                              🌱 THC Drinks
                            </span>
                          )}
                          {venue.serves_hemp_drinks && (
                            <span class="bg-orange-100 text-orange-800 text-xs font-medium px-3 py-1 rounded-full">
                              🌾 Hemp Drinks
                            </span>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      ) : (
        <div class="text-center py-12 bg-gray-50 rounded-lg">
          <p class="text-gray-500 mb-4">No venues found in {cityName} yet.</p>
          <a 
            href="/contact" 
            class="text-indigo-600 hover:text-indigo-700 font-medium"
          >
            Know of a venue? Let us know →
          </a>
        </div>
      )}
    </div>
  </main>
</Layout> 
